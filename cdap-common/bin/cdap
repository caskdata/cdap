#!/usr/bin/env bash
#
# Copyright © 2016 Cask Data, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

#
# This script is the main script for performing all CDAP functions. With it,
# you can start, stop, or get status on CDAP and its services, run queries,
# execute CLI commands, and more. Anything not handled by this script is passed
# to the CDAP CLI to be interpreted. 
#

__script=${BASH_SOURCE[0]}

__target=$(readlink ${__script}) # TODO: readlink isn't portable, if we support more than Linux/macOS
if [[ $? -ne 0 ]]; then
  __target=${__script} # no symlink
fi
__app_home=$(cd $(dirname ${__target})/.. >&-; pwd -P)

__comp_home=$(cd ${__target%/*/*} >&-; pwd -P)
# Determine if we're in the SDK or distributed
if [[ ${__comp_home%/*} == /opt/cdap ]]; then
  __app_home=${__comp_home}
  __cdap_home=/opt/cdap
else
  # We're in the SDK, __app_home and __cdap_home are identical
  __cdap_home=${__app_home}
fi

# Source our functions script, which will be located with us
source "${__app_home}"/bin/functions.sh

__fn_home=$(cdap_home)
# Do a small sanity check
if [[ ${__cdap_home} != ${__fn_home} ]]; then
  die "CDAP_HOME doesn't match output of cdap_home function! Aborting!"
fi

export CDAP_HOME=${__cdap_home}

# Load user-modifiable configuration
test -f "${CDAP_CONF}"/cdap-env.sh && source "${CDAP_CONF}"/cdap-env.sh

# Main script, handles options and Does the Right Thing™
case ${1} in
  auth-server|kafka-server|master|router|ui) CDAP_SERVICE=${1}; shift; cdap_service ${CDAP_SERVICE} ${@}; __ret=${?} ;;
  classpath) cdap_service master classpath; __ret=${?} ;;
  cli) shift; cdap_cli ${@}; __ret=${?} ;;
  config-tool) shift; cdap_config_tool ${@}; __ret=${?} ;;
  upgrade-tool) shift; cdap_run_class co.cask.cdap.data.tools.UpgradeTool ${@}; __ret=${?} ;;
  run) shift; cdap_run_class ${@}; __ret=${?} ;;
  sdk) shift; cdap_sdk ${@}; __ret=${?} ;;
  tx-debugger) shift; cdap_tx_debugger ${@}; __ret=${?} ;;
  -h|--help|usage|'')
    echo
    echo "Usage: ${0} <command> [arguments]"
    echo
    echo "  Commands:"
    echo
    if [[ $(cdap_context) == 'distributed' ]]; then
    # No indent to make lining up easier
    echo "    auth-server  - Sends the arguments (start/stop/etc.) to the appropriate CDAP service on this host"
    echo "    kafka-server"
    echo "    master"
    echo "    router"
    echo "    ui"
    echo
    echo "    classpath    - Returns the Java CLASSPATH of the CDAP Master service"
    echo "    config-tool  - Returns JSON-encoded CDAP configuration key/value pairs"
    echo "    run          - Runs a given class with arguments using the CDAP Master CLASSPATH and environment"
    echo
    else
    echo "    sdk          - Sends the arguments (start/stop/etc.) to the Standalone CDAP service on this host"
    echo
    fi
    echo "    cli          - Starts an interactive CDAP CLI session"
    echo "    tx-debugger  - Runs CDAP transaction debugger"
    echo "    upgrade-tool - Runs the CDAP Upgrade Tool with arguments"
    echo
    echo " Get more help for each command by executing:"
    echo " ${0} <command> --help"
    echo
    ;;
  *) cdap_cli ${@}; __ret=${?} ;;
esac

exit ${__ret}
